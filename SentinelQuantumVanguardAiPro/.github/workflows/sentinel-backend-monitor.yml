name: üõ∞Ô∏è Sentinel Backend Monitor

on:
  schedule:
    - cron: "*/10 * * * *"   # toutes les 10 minutes
  workflow_dispatch:

jobs:
  monitor:
    runs-on: ubuntu-latest
    name: üîç Surveillance Render Backend
    steps:
      - name: üß† Initialisation de l‚Äôenvironnement
        run: |
          echo "üîß D√©marrage du moniteur Sentinel Backend..."
          mkdir -p logs

      - name: üåê V√©rification du statut Render
        id: ping
        run: |
          echo "‚è±Ô∏è Test de latence et de disponibilit√© du backend..."
          URL="https://sentinel-quantum-vanguard-ai-pro.onrender.com"
          START=$(date +%s)
          HTTP_CODE=$(curl -s -o /tmp/result -w "%{http_code}" "$URL" || echo 000)
          END=$(date +%s)
          LATENCY=$((END - START))

          echo "Statut HTTP : $HTTP_CODE"
          echo "Latence : ${LATENCY}s"
          echo "http_code=$HTTP_CODE" >> $GITHUB_OUTPUT
          echo "latency=$LATENCY" >> $GITHUB_OUTPUT

          echo "$(date '+%d/%m/%Y %H:%M:%S') | Code : $HTTP_CODE | Latence : ${LATENCY}s" >> logs/backend-monitor.log

      - name: üö® Analyse des r√©sultats
        if: ${{ steps.ping.outputs.http_code != '200' || steps.ping.outputs.latency > 10 }}
        run: |
          echo "‚ö†Ô∏è Backend Render instable ou en panne !"
          echo "Red√©ploiement automatique d√©clench√©..."

          curl -X POST "https://api.render.com/v1/services/<SERVICE_ID>/deploys" \
               -H "Accept: application/json" \
               -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
               -d '{"clearCache":false}'

          echo "‚úÖ Nouvelle instance Render d√©ploy√©e." >> logs/backend-monitor.log

      - name: ‚úÖ R√©sultat sain
        if: ${{ steps.ping.outputs.http_code == '200' && steps.ping.outputs.latency <= 10 }}
        run: |
          echo "üü¢ Backend op√©rationnel et rapide."
          echo "OK | $(date '+%d/%m/%Y %H:%M:%S')" >> logs/backend-monitor.log

      - name: üì° Notification Telegram (optionnelle)
        if: always()
        run: |
          if [ -n "${{ secrets.TELEGRAM_WEBHOOK }}" ]; then
            MSG="üîî Sentinel Backend : HTTP ${{ steps.ping.outputs.http_code }} | Latence ${{ steps.ping.outputs.latency }} s"
            curl -s -X POST ${{ secrets.TELEGRAM_WEBHOOK }} -d "text=$MSG"
          fi

      - name: üóÇÔ∏è Upload des logs (artifacts)
        uses: actions/upload-artifact@v4
        with:
          name: backend-monitor-logs
          path: logs/backend-monitor.log
