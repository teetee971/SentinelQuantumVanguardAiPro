name: 🧠 Sentinel Autonomous Command Node

on:
  schedule:
    - cron: '0 */4 * * *' # toutes les 4 heures
  workflow_dispatch:

jobs:
  command_node:
    runs-on: ubuntu-latest

    steps:
      - name: 🔄 Checkout
        uses: actions/checkout@v4

      - name: 🧩 Analyse de la synchronisation globale
        uses: actions/github-script@v7
        id: analyze
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const { data: runs } = await github.rest.actions.listWorkflowRunsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 20
            });
            const summary = runs.workflow_runs.map(r => ({
              name: r.name,
              conclusion: r.conclusion,
              updated_at: r.updated_at
            }));
            fs.mkdirSync('command', { recursive: true });
            fs.writeFileSync('command/sync.json', JSON.stringify(summary, null, 2));
            const failed = summary.filter(x => x.conclusion === "failure");
            core.setOutput("fail_count", failed.length);
            core.notice(`📊 ${failed.length} workflows en anomalie détectés.`);

      - name: 🚀 Relance automatique des modules défaillants
        if: ${{ fromJSON(steps.analyze.outputs.fail_count) > 0 }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: runs } = await github.rest.actions.listWorkflowRunsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 10
            });
            for (const r of runs.workflow_runs.filter(x => x.conclusion === "failure")) {
              await github.rest.actions.reRunWorkflow({
                owner: context.repo.owner,
                repo: context.repo.repo,
                run_id: r.id
              });
              console.log(`🔁 Relance effectuée : ${r.name}`);
            }

      - name: 🧠 Génération du rapport de coordination
        run: |
          mkdir -p public/command
          echo "<html><head><title>Sentinel Autonomous Command Node</title><meta http-equiv='refresh' content='14400'></head><body style='background:#0d1117;color:#e6edf3;font-family:monospace;padding:20px;'>" > public/command/index.html
          echo "<h2>🧠 Sentinel Autonomous Command Node</h2><hr>" >> public/command/index.html
          echo "<h3>📦 Synchronisation des modules</h3><pre>" >> public/command/index.html
          cat command/sync.json >> public/command/index.html
          echo "</pre><hr><p>🕒 Dernière exécution : $(date)</p></body></html>" >> public/command/index.html
          echo "✅ Rapport généré."

      - name: 🌐 Publication sur Cloudflare Pages
        uses: cloudflare/pages-action@v1
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          projectName: sentinelquantumvanguardaipro
          directory: public
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}

      - name: 📡 Rapport Telegram global
        run: |
          FAIL=$(jq '[.[] | select(.conclusion=="failure")] | length' command/sync.json)
          OK=$(jq '[.[] | select(.conclusion=="success")] | length' command/sync.json)
          MSG="🧠 Sentinel Autonomous Command Node\nSuccès : ${OK} | Échecs : ${FAIL}\nLien : https://sentinelquantumvanguardaipro.pages.dev/command/\n🕒 $(date)"
          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
               -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
               -d text="$MSG"

      - name: ✅ Fin du cycle Command Node
        run: echo "✔️ Sentinel Autonomous Command Node terminé avec succès."