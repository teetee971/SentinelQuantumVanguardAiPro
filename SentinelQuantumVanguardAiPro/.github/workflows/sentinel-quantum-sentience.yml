name: 🧩 Wave 28 – Sentinel Quantum Sentience Node (Contextual Awareness Core)

on:
  schedule:
    - cron: "0 */3 * * *"     # toutes les 3h
  workflow_dispatch:

jobs:
  sentience:
    runs-on: ubuntu-latest
    name: 🧠 Quantum Sentience Core
    steps:
      - name: 🚀 Initialisation
        run: |
          echo "🧩 Lancement Quantum Sentience Node"
          mkdir -p logs sentience
          echo "$(date '+%F %T') | Début Wave 28" >> logs/sentience.log

      - name: 📡 Lecture des états précédents
        run: |
          cp public/telemetry/neural_state.json sentience/neural.json 2>/dev/null || echo '{}' > sentience/neural.json
          cp public/telemetry/adaptive_model.json sentience/adaptive.json 2>/dev/null || echo '{}' > sentience/adaptive.json
          cp public/telemetry/predictive_forecast.json sentience/predictive.json 2>/dev/null || echo '{}' > sentience/predictive.json
          cp public/telemetry/remediation_report.json sentience/repair.json 2>/dev/null || echo '{}' > sentience/repair.json

      - name: 🧬 Génération du rapport de cohérence
        run: |
          jq -n --slurpfile n sentience/neural.json \
                --slurpfile a sentience/adaptive.json \
                --slurpfile p sentience/predictive.json \
                --slurpfile r sentience/repair.json '
          {
            timestamp: now,
            meta: {
              total_nodes: ($n[0].nodes|length),
              stable_nodes: ([.n[0].nodes[]? | select(.health=="stable")] | length),
              avg_score: ([$a[0].nodes[]?.score] | add / (length + 0.1))
            },
            risk: ($p[0].global_risk // "Unknown"),
            last_actions: ($r[0].actions // []),
            global_state: (if ($p[0].global_risk == "High") then "⚠️ surveillance requise"
                           else "✅ système nominal" end),
            commentary: "Ce rapport agrège la Neural Fabric, l’Adaptive Loop et le Predictive Core pour produire une conscience de système : une vue cohérente du réseau Sentinel et de sa stabilité opérationnelle."
          }' > public/telemetry/quantum_sentience_report.json
          echo "✅ Rapport JSON généré" >> logs/sentience.log

      - name: 🧾 Génération du résumé Markdown
        run: |
          jq -r '
            "# Sentinel Quantum Sentience Node\n\n" +
            "Horodatage : " + (.timestamp|tostring) + "\n\n" +
            "## État global : " + .global_state + "\n\n" +
            "- Nœuds totaux : " + (.meta.total_nodes|tostring) + "\n" +
            "- Nœuds stables : " + (.meta.stable_nodes|tostring) + "\n" +
            "- Score moyen : " + (.meta.avg_score|tostring) + "\n" +
            "- Risque global : " + .risk + "\n\n" +
            "### Dernières actions correctives\n" +
            (.last_actions|map("- " + (.wave // "indéfini"))|join("\n")) + "\n\n" +
            "### Commentaire :\n" + .commentary + "\n"
          ' public/telemetry/quantum_sentience_report.json > public/telemetry/quantum_sentience.md
          echo "✅ Rapport Markdown généré" >> logs/sentience.log

      - name: 💾 Commit
        run: |
          git config --global user.name "Sentinel-Sentience"
          git config --global user.email "sentience@sentinel"
          git add public/telemetry/quantum_sentience_report.json public/telemetry/quantum_sentience.md
          git commit -m "🧩 Update Quantum Sentience Report $(date +%T)" || echo "Aucune modification"
          git push || echo "Push non nécessaire"

      - name: 📲 Notification Telegram
        if: always()
        run: |
          if [ -n "${{ secrets.TELEGRAM_WEBHOOK }}" ]; then
            MSG="🧠 [Quantum Sentience Node] Rapport de cohérence mis à jour ✅"
            curl -s -X POST ${{ secrets.TELEGRAM_WEBHOOK }} -d "text=$MSG"
          fi

      - name: 🗂️ Upload logs
        uses: actions/upload-artifact@v4
        with:
          name: sentinel-quantum-sentience-logs
          path: logs/
