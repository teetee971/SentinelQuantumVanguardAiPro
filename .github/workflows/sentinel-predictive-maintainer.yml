name: 🔮 Sentinel Predictive Maintainer

on:
  schedule:
    - cron: '20 */2 * * *' # toutes les 2 heures 20
  workflow_dispatch:

jobs:
  predictive_maintenance:
    runs-on: ubuntu-latest

    steps:
      - name: 🔄 Checkout du dépôt
        uses: actions/checkout@v4

      - name: 🧠 Collecte des données récentes
        uses: actions/github-script@v7
        id: collect
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const { data: runs } = await github.rest.actions.listWorkflowRunsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 15
            });
            const data = runs.workflow_runs.map(r => ({
              name: r.name,
              status: r.conclusion,
              duration: ((new Date(r.updated_at) - new Date(r.run_started_at)) / 60000).toFixed(2),
              updated: r.updated_at
            }));
            fs.mkdirSync('predictive', { recursive: true });
            fs.writeFileSync('predictive/workflows.json', JSON.stringify(data, null, 2));
            core.notice(`📊 ${data.length} workflows analysés.`);

      - name: 🌐 Vérifier la latence Cloudflare
        run: |
          mkdir -p predictive
          echo "🌍 Cloudflare latency check..." > predictive/network.txt
          ping -c 3 pages.dev | tail -n 3 >> predictive/network.txt || echo "Ping failed" >> predictive/network.txt
          curl -s -o /dev/null -w "HTTP:%{http_code} | Time:%{time_total}s" https://sentinelquantumvanguardaipro.pages.dev >> predictive/network.txt
          echo "✅ Réseau analysé."

      - name: 🔮 Analyse prédictive
        run: |
          mkdir -p predictive
          echo "🔮 Analyse des risques potentiels..." > predictive/forecast.txt
          FAIL_RATE=$(jq '[ .[] | select(.status=="failure") ] | length' predictive/workflows.json)
          TOTAL=$(jq length predictive/workflows.json)
          PERCENT=$(echo "scale=2; ($FAIL_RATE/$TOTAL)*100" | bc -l)
          echo "Taux d'échec récent: ${PERCENT}%" >> predictive/forecast.txt
          if (( $(echo "$PERCENT > 25" | bc -l) )); then
            echo "⚠️ Risque élevé de panne à court terme." >> predictive/forecast.txt
          elif (( $(echo "$PERCENT > 10" | bc -l) )); then
            echo "⚠️ Risque modéré, surveillance recommandée." >> predictive/forecast.txt
          else
            echo "✅ Aucun risque significatif détecté." >> predictive/forecast.txt
          fi
          echo "📶 Analyse réseau:" >> predictive/forecast.txt
          cat predictive/network.txt >> predictive/forecast.txt
          echo "🧠 Prédiction effectuée à $(date)" >> predictive/forecast.txt

      - name: 🧾 Génération du rapport HTML
        run: |
          mkdir -p public/predictive
          echo "<html><head><title>Sentinel Predictive Maintainer</title><meta http-equiv='refresh' content='7200'></head><body style='background:#0d1117;color:#e6edf3;font-family:monospace;padding:20px;'>" > public/predictive/index.html
          echo "<h2>🔮 Sentinel Predictive Maintainer</h2><hr>" >> public/predictive/index.html
          echo "<h3>📊 Historique workflows</h3><pre>" >> public/predictive/index.html
          cat predictive/workflows.json >> public/predictive/index.html
          echo "</pre><h3>🌐 Réseau & Prédiction</h3><pre>" >> public/predictive/index.html
          cat predictive/forecast.txt >> public/predictive/index.html
          echo "</pre><hr><p>🕒 Dernière mise à jour : $(date)</p></body></html>" >> public/predictive/index.html
          echo "✅ Rapport HTML généré."

      - name: 🚀 Publication sur Cloudflare Pages
        uses: cloudflare/pages-action@v1
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          projectName: sentinelquantumvanguardaipro
          directory: public
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}

      - name: 📡 Alerte proactive Telegram
        run: |
          RISK=$(grep "Risque" predictive/forecast.txt || echo "✅ Aucun risque détecté.")
          MSG="🔮 Sentinel Predictive Maintainer\n${RISK}\n🕒 $(date)"
          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
            -d text="$MSG"

      - name: ✅ Fin du cycle Predictive
        run: echo "✔️ Sentinel Predictive Maintainer terminé avec succès."