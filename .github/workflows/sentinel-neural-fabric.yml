name: 🧬 Wave 24 – Sentinel AI Neural Fabric (Auto-Adaptive Network)

on:
  schedule:
    - cron: "*/45 * * * *"   # toutes les 45 minutes
  workflow_dispatch:

jobs:
  neural_fabric:
    runs-on: ubuntu-latest
    name: 🧠 Neural Fabric Core
    steps:
      - name: 🚀 Initialisation
        run: |
          echo "🧬 Lancement Neural Fabric"
          mkdir -p logs neural
          echo "$(date '+%F %T') | Début Wave 24" >> logs/neural.log

      - name: 📡 Agrégation des waves actives
        run: |
          curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/actions/runs?per_page=50" > neural/runs.json
          jq '[.workflow_runs[] | {workflow:.name,status:.status,conclusion:.conclusion,created_at:.created_at}]' neural/runs.json > neural/summary.json

      - name: 🧮 Construction du graphe de dépendances
        run: |
          echo "Création du graphe neural"
          jq -n \
            --arg date "$(date '+%F %T')" \
            --slurpfile data neural/summary.json \
            '{
              timestamp:$date,
              nodes:($data[0][] | group_by(.workflow) | map({
                id: .[0].workflow,
                last_run:(.[0].created_at),
                health:(if ([.[].conclusion | select(.=="success")] | length > 0) then "stable" else "unstable" end)
              })),
              edges:[
                {from:"Wave 16 – Self-Healing", to:"Wave 17 – Optimizer"},
                {from:"Wave 17 – Optimizer", to:"Wave 18 – Telemetry"},
                {from:"Wave 18 – Telemetry", to:"Wave 19 – Orchestrator"},
                {from:"Wave 19 – Orchestrator", to:"Wave 20 – Dashboard UI"},
                {from:"Wave 20 – Dashboard UI", to:"Wave 21 – Global Map"},
                {from:"Wave 21 – Global Map", to:"Wave 22 – Command Center"},
                {from:"Wave 22 – Command Center", to:"Wave 23 – Network Console"}
              ]
            }' > public/telemetry/neural_state.json
          echo "✅ Graphe neural généré" >> logs/neural.log

      - name: 🧠 Auto-commit
        run: |
          git config --global user.name "Sentinel-Neural-Fabric"
          git config --global user.email "fabric@sentinel"
          git add public/telemetry/neural_state.json
          git commit -m "🧬 Update Neural Fabric state $(date +%T)" || echo "Aucune modif"
          git push || echo "Push non nécessaire"

      - name: 📲 Notification Telegram
        if: always()
        run: |
          if [ -n "${{ secrets.TELEGRAM_WEBHOOK }}" ]; then
            MSG="🧬 Neural Fabric executed → graphe synchronisé ✅"
            curl -s -X POST ${{ secrets.TELEGRAM_WEBHOOK }} -d "text=$MSG"
          fi

      - name: 🗂️ Upload logs
        uses: actions/upload-artifact@v4
        with:
          name: sentinel-neural-fabric-logs
          path: logs/
