name: ü§ñ Sentinel AI Ops Orchestrator

on:
  schedule:
    - cron: '*/20 * * * *'   # toutes les 20 minutes
  workflow_dispatch:

jobs:
  orchestrator:
    runs-on: ubuntu-latest

    steps:
      - name: üîÑ Checkout repository
        uses: actions/checkout@v4

      - name: üß† Analyser l‚Äô√©tat des workflows Sentinel
        uses: actions/github-script@v7
        id: analyze
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const { data: runs } = await github.rest.actions.listWorkflowRunsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 15
            });

            const failed = runs.workflow_runs.filter(r => r.conclusion === "failure");
            const running = runs.workflow_runs.filter(r => r.status === "in_progress");
            const success = runs.workflow_runs.filter(r => r.conclusion === "success");

            fs.mkdirSync('aiops', { recursive: true });
            const summary = {
              timestamp: new Date().toISOString(),
              total: runs.workflow_runs.length,
              failed: failed.length,
              running: running.length,
              success: success.length,
              lastSuccess: success[0] ? success[0].name : "N/A"
            };
            fs.writeFileSync('aiops/status.json', JSON.stringify(summary, null, 2));
            core.setOutput("failed", failed.length > 0 ? "true" : "false");
            core.notice(`üìä Workflows total: ${summary.total}, √©checs: ${summary.failed}`);

      - name: üöÄ Relancer les workflows √©chou√©s
        if: steps.analyze.outputs.failed == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: runs } = await github.rest.actions.listWorkflowRunsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 5
            });
            for (const r of runs.workflow_runs.filter(x => x.conclusion === "failure")) {
              await github.rest.actions.reRunWorkflow({
                owner: context.repo.owner,
                repo: context.repo.repo,
                run_id: r.id
              });
              console.log(`üîÅ Relanc√©: ${r.name}`);
            }

      - name: üåê Publier l‚Äô√©tat sur Cloudflare Pages
        uses: cloudflare/pages-action@v1
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          projectName: sentinelquantumvanguardaipro
          directory: aiops
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}

      - name: üì° Envoi r√©sum√© Telegram
        run: |
          STATUS=$(jq -r '.failed' aiops/status.json)
          SUCCESS=$(jq -r '.success' aiops/status.json)
          MSG="ü§ñ Sentinel AI Ops Orchestrator\nSucc√®s: ${SUCCESS} workflows\n√âchecs: ${STATUS}\nüïí $(date)"
          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
            -d text="$MSG"

      - name: ‚úÖ Fin du cycle AI Ops
        run: echo "‚úîÔ∏è Sentinel AI Ops Orchestrator termin√© avec succ√®s."