name: 🛠️ Wave 27 – Sentinel Auto-Remediation Engine (Predictive Repair System)

on:
  schedule:
    - cron: "*/20 * * * *"     # toutes les 20 min
  workflow_dispatch:

jobs:
  autorepair:
    runs-on: ubuntu-latest
    name: 🛠️ Auto-Remediation Core
    steps:
      - name: 🚀 Initialisation
        run: |
          echo "🛠️ Démarrage Auto-Remediation Engine"
          mkdir -p logs repair
          echo "$(date '+%F %T') | Début Wave 27" >> logs/repair.log

      - name: 📡 Lecture du rapport prédictif
        run: |
          if [ -f public/telemetry/predictive_forecast.json ]; then
            cp public/telemetry/predictive_forecast.json repair/forecast.json
          else
            echo '{"predictions":[],"global_risk":"Normal"}' > repair/forecast.json
          fi

      - name: 🧠 Analyse des risques & plan d’action
        id: analyze
        run: |
          echo "Analyse du rapport..."
          jq '{
            timestamp: now,
            to_fix: [.predictions[] | select(.risk > 70)],
            global_risk: .global_risk
          }' repair/forecast.json > repair/action_plan.json
          echo "✅ Plan d’action établi" >> logs/repair.log

      - name: 🧰 Application des réparations (Render + Cloudflare)
        if: ${{ steps.analyze.outputs.global_risk == 'High' }}
        run: |
          echo "⚠️ Détection de risque : intervention en cours"
          curl -s -X POST "https://api.render.com/v1/services/${{ secrets.RENDER_SERVICE_ID }}/deploys" \
               -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}"
          curl -s -X POST "https://api.cloudflare.com/client/v4/zones/${{ secrets.CLOUDFLARE_ZONE_ID }}/purge_cache" \
               -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
               -H "Content-Type: application/json" --data '{"purge_everything":true}'
          echo "✅ Rebuild Render & purge Cloudflare effectués" >> logs/repair.log

      - name: 🧾 Génération du rapport final
        run: |
          jq -n --arg date "$(date '+%F %T')" \
             --slurpfile p repair/action_plan.json \
             '{timestamp:$date, actions: $p[0].to_fix, status:"completed"}' \
             > public/telemetry/remediation_report.json
          echo "Rapport de réparation généré" >> logs/repair.log

      - name: 🧠 Commit du rapport
        run: |
          git config --global user.name "Sentinel-AutoRepair"
          git config --global user.email "autorepair@sentinel"
          git add public/telemetry/remediation_report.json
          git commit -m "🛠️ Auto-Remediation Report $(date +%T)" || echo "Aucune modification"
          git push || echo "Push non nécessaire"

      - name: 📲 Notification Telegram
        if: always()
        run: |
          if [ -n "${{ secrets.TELEGRAM_WEBHOOK }}" ]; then
            MSG="🛠️ [Sentinel Auto-Remediation] Cycle terminé → voir remediation_report.json"
            curl -s -X POST ${{ secrets.TELEGRAM_WEBHOOK }} -d "text=$MSG"
          fi

      - name: 🗂️ Upload logs
        uses: actions/upload-artifact@v4
        with:
          name: sentinel-auto-remediation-logs
          path: logs/
