name: üß† Sentinel AutoFixer v9.0 ‚Äî QuantumPredictor (Anomaly Detection)

on:
  schedule:
    - cron: "*/30 * * * *"
  workflow_dispatch:

jobs:
  sentinel-autofix:
    runs-on: ubuntu-latest
    steps:
      - name: üîÑ Checkout
        uses: actions/checkout@v4

      - name: üß© Prepare folders
        run: |
          mkdir -p public/{dashboard,documentation,admin/agents}
          : > public/admin/agents/.keep
          : > public/documentation/.keep

      - name: ‚òÅÔ∏è Deploy to Cloudflare Pages
        id: deploy
        uses: cloudflare/pages-action@v1
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          projectName: "sentinelquantumvanguardaipro"
          directory: "dist"

      - name: ü©∫ HealthAgent (status + avg latency)
        id: health
        run: |
          URLS=(
            "https://sentinelquantumvanguardaipro.pages.dev"
            "https://sentinelquantumvanguardaipro.pages.dev/dashboard/"
            "https://sentinelquantumvanguardaipro.pages.dev/documentation/"
            "https://sentinelquantumvanguardaipro.pages.dev/admin/agents/"
          )
          REPORT=""
          ERR=0; SUM=0; N=0
          for U in "${URLS[@]}"; do
            T0=$(date +%s%3N)
            C=$(curl -o /dev/null -s -w "%{http_code}" "$U")
            T1=$(date +%s%3N); L=$((T1-T0))
            SUM=$((SUM+L)); N=$((N+1))
            if [ "$C" = "200" ]; then
              REPORT+="‚úÖ $C ‚Äî $U [${L}ms]\n"
            else
              REPORT+="‚ö†Ô∏è $C ‚Äî $U [${L}ms]\n"; ERR=$((ERR+1))
            fi
          done
          AVG=$((SUM/N))
          echo -e "$REPORT\n‚è±Ô∏è Moyenne latence: ${AVG}ms" > health_report.txt
          echo "ERREURS=$ERR"   >> $GITHUB_ENV
          echo "LATENCE=$AVG"   >> $GITHUB_ENV

      - name: üîÆ QuantumPredictor (anomaly detection)
        id: qp
        run: |
          set -e
          mkdir -p public/admin/agents
          HIST=public/admin/agents/history.json
          [ -f "$HIST" ] || echo "[]" > "$HIST"

          node - <<'NODE'
          const fs=require('fs');
          const path='public/admin/agents/history.json';
          const h=JSON.parse(fs.readFileSync(path,'utf8'));
          const now=new Date().toISOString().replace('T',' ').replace(/\..+/,'')+' UTC';
          const e=parseInt(process.env.ERREURS||'0',10);
          const l=parseInt(process.env.LATENCE||'0',10);

          // push newest first, keep last 20
          h.unshift({date:now, erreurs:e, latence:l});
          const H=h.slice(0,20);

          // stats helpers
          const mean = arr => arr.reduce((a,b)=>a+b,0)/arr.length || 0;
          const std  = arr => {
            if(arr.length<2) return 0;
            const m=mean(arr);
            return Math.sqrt(arr.reduce((s,x)=>s+(x-m)*(x-m),0)/(arr.length-1));
          };

          const errs = H.map(x=>+x.erreurs);
          const lats = H.map(x=>+x.latence);

          const me=mean(errs), se=std(errs);
          const ml=mean(lats), sl=std(lats);

          // thresholds: z-score > 2.5 OR hard limits
          const z = (x,m,s)=> s>0 ? (x-m)/s : 0;
          const za = z(e,me, se);
          const zl = z(l,ml, sl);

          const hardErr = e >= 3;           // ‚â•3 pages KO
          const hardLat = l >= 1500;        // ‚â•1.5s moyenne
          const softErr = za >= 2.5;
          const softLat = zl >= 2.5;

          const anomalyErr = hardErr || softErr;
          const anomalyLat = hardLat || softLat;
          const anomaly    = anomalyErr || anomalyLat;

          // persist artifacts
          fs.writeFileSync(path, JSON.stringify(H,null,2));
          fs.writeFileSync('public/admin/agents/anomaly.json', JSON.stringify({
            now, erreurs:e, latence:l,
            meanErr:me, stdErr:se, zErr:+za.toFixed(2),
            meanLat:ml, stdLat:sl, zLat:+zl.toFixed(2),
            anomaly, anomalyErr, anomalyLat,
            rules:{ hardErr, hardLat, softErr, softLat, zThresh:2.5 }
          },null,2));
          // status badge (for quick embedding)
          const badge = anomaly ? "üî¥ anomaly" : "üü¢ normal";
          fs.writeFileSync('public/admin/agents/status.json', JSON.stringify({status:badge, time:now},null,2));
          NODE

      - name: üß∞ Build Supervisor Console (banner + trends)
        run: |
          DATE=$(date '+%Y-%m-%d %H:%M:%S UTC')
          cat > public/admin/agents/index.html <<HTML
          <!doctype html><html lang="fr"><head>
            <meta charset="utf-8"><meta name="viewport" content="width=device-width,initial-scale=1">
            <title>Sentinel Quantum Supervisor ‚Äî v9.0</title>
            <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
            <style>
              :root{--fg:#0ff;--warn:#ffcc00;--err:#ff4444;--bg:#000;}
              body{background:var(--bg);color:var(--fg);font-family:ui-monospace,monospace;padding:20px}
              h1{margin:0 0 10px;text-shadow:0 0 10px var(--fg)}
              .card{background:#070a0f;border:1px solid #033;border-radius:10px;padding:14px;margin:10px 0}
              .banner{border-left:6px solid var(--err);background:#2a0000;color:#fee;padding:12px;border-radius:8px}
              table{width:100%;border-collapse:collapse}
              th,td{border:1px solid #033;padding:6px} th{background:#022}
              canvas{background:#001;border-radius:8px;padding:8px}
              footer{margin-top:16px;font-size:12px;color:#0cc}
            </style>
          </head><body>
            <h1>üõ∞Ô∏è Sentinel Quantum Supervisor ‚Äî v9.0 (QuantumPredictor)</h1>
            <div class="card"><pre>$(cat health_report.txt)</pre></div>
            <div id="ban"></div>

            <div class="card">
              <h3>üìä Tendance (10‚Äì20 derniers cycles)</h3>
              <canvas id="trend" height="240"></canvas>
            </div>

            <div class="card">
              <h3>üóÇÔ∏è Historique</h3>
              <table id="t"><thead><tr><th>Date</th><th>Erreurs</th><th>Latence (ms)</th></tr></thead><tbody></tbody></table>
            </div>

            <script>
              Promise.all([
                fetch('history.json').then(r=>r.json()),
                fetch('anomaly.json').then(r=>r.json()).catch(()=>null)
              ]).then(([hist,an])=>{
                // table
                const tb=document.querySelector('#t tbody');
                hist.forEach(x=>{
                  const tr=document.createElement('tr');
                  tr.innerHTML=\`<td>\${x.date}</td><td>\${x.erreurs}</td><td>\${x.latence}</td>\`;
                  tb.appendChild(tr);
                });

                // banner if anomaly
                if(an && an.anomaly){
                  const b=document.getElementById('ban');
                  b.className='banner';
                  b.innerHTML =
                    'üö® <b>Anomalie d√©tect√©e</b> ‚Äî '+
                    \`Erreurs=\${an.erreurs} (z=\${an.zErr}), Latence=\${an.latence}ms (z=\${an.zLat})\`+
                    '<br><small>Seuil z=2.5 ‚Ä¢ R√®gles hard: erreurs‚â•3, latence‚â•1500ms</small>';
                }

                // chart
                const dates=hist.map(x=>x.date).reverse();
                const errs=hist.map(x=>+x.erreurs).reverse();
                const lats=hist.map(x=>+x.latence).reverse();
                new Chart(document.getElementById('trend'),{
                  type:'line',
                  data:{labels:dates,datasets:[
                    {label:'Erreurs',data:errs,borderColor:'#ff4444',backgroundColor:'#ff444422',fill:true},
                    {label:'Latence',data:lats,borderColor:'#00ffff',backgroundColor:'#00ffff22',fill:true},
                  ]},
                  options:{scales:{y:{beginAtZero:true}},plugins:{legend:{labels:{color:'#0ff'}}}}
                });
              });
            </script>
            <footer>Derni√®re mise √† jour : ${DATE} ‚Ä¢ AutoFixer v9.0 ‚Ä¢ Anomaly Detection</footer>
          </body></html>
          HTML

      - name: üì≤ Telegram ‚Äî result & anomaly alert
        if: always()
        run: |
          STATUS="‚úÖ D√©ploiement r√©ussi"
          if [ "${{ job.status }}" != "success" ]; then STATUS="‚ö†Ô∏è Erreur pipeline"; fi
          A=$(cat public/admin/agents/anomaly.json 2>/dev/null || echo '{}')
          IS=$(echo "$A" | jq -r '.anomaly // false')
          ERR=$(echo "$A" | jq -r '.erreurs // empty')
          LAT=$(echo "$A" | jq -r '.latence // empty')
          Z1=$(echo "$A" | jq -r '.zErr // empty')
          Z2=$(echo "$A" | jq -r '.zLat // empty')

          if [ "$IS" = "true" ]; then
            HEAD="üö® *Anomalie d√©tect√©e*"
            BODY="Erreurs=\`$ERR\` (z=\`$Z1\`), Latence=\`$LAT ms\` (z=\`$Z2\`)"
          else
            HEAD="üü¢ *Aucune anomalie d√©tect√©e*"
            BODY="Syst√®me nominal."
          fi

          MSG="*Sentinel AutoFixer v9.0 ‚Äî QuantumPredictor*\n\n${STATUS}\n\n${HEAD}\n${BODY}\n\nüìà Console : https://sentinelquantumvanguardaipro.pages.dev/admin/agents/"
          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -d chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" -d parse_mode="Markdown" -d text="$MSG"
