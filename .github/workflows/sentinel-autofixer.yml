name: üß† Sentinel AutoFixer v8.0 ‚Äî Quantum Supervisor + Courbes IA

on:
  schedule:
    - cron: "*/30 * * * *"
  workflow_dispatch:

jobs:
  sentinel-autofix:
    runs-on: ubuntu-latest

    steps:
      - name: üîÑ Checkout du d√©p√¥t
        uses: actions/checkout@v4

      - name: üß© V√©rifie la structure
        run: |
          mkdir -p public/dashboard public/documentation public/admin/agents
          touch public/dashboard/.keep public/documentation/.keep

      - name: ‚òÅÔ∏è D√©ploiement Cloudflare Pages
        id: deploy
        uses: cloudflare/pages-action@v1
        with:
          apiToken: \${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: \${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          projectName: "sentinelquantumvanguardaipro"
          directory: "dist"

      - name: ü©∫ HealthAgent ‚Äî V√©rification + latence
        id: health
        run: |
          URLS=(
            "https://sentinelquantumvanguardaipro.pages.dev"
            "https://sentinelquantumvanguardaipro.pages.dev/dashboard/"
            "https://sentinelquantumvanguardaipro.pages.dev/documentation/"
          )
          STATUS_REPORT=""
          ERRORS=0
          AVG_LAT=0
          COUNT=0
          for URL in "\${URLS[@]}"; do
            START=$(date +%s%3N)
            CODE=$(curl -o /dev/null -s -w "%{http_code}" "\$URL")
            END=$(date +%s%3N)
            LAT=$((END-START))
            AVG_LAT=$((AVG_LAT+LAT))
            COUNT=$((COUNT+1))
            if [ "\$CODE" = "200" ]; then
              STATUS_REPORT+="‚úÖ OK (\$CODE) ‚Äî \$URL [${LAT}ms]\n"
            else
              STATUS_REPORT+="‚ö†Ô∏è ERREUR (\$CODE) ‚Äî \$URL [${LAT}ms]\n"
              ERRORS=$((ERRORS+1))
            fi
          done
          AVG_LAT=$((AVG_LAT/COUNT))
          echo -e "\$STATUS_REPORT\n‚è±Ô∏è Moyenne latence: ${AVG_LAT}ms" > health_report.txt
          echo "ERREURS=\$ERRORS" >> \$GITHUB_ENV
          echo "LATENCE=\$AVG_LAT" >> \$GITHUB_ENV

      - name: üß† G√©n√©ration console IA v8.0 (courbes + historique)
        run: |
          mkdir -p public/admin/agents
          DATE=$(date '+%Y-%m-%d %H:%M:%S UTC')
          HIST_FILE="public/admin/agents/history.json"
          [ ! -f "\$HIST_FILE" ] && echo "[]" > "\$HIST_FILE"
          node -e "
          const fs=require('fs');
          const p='$HIST_FILE';
          const h=JSON.parse(fs.readFileSync(p,'utf8'));
          h.unshift({date:'$DATE',erreurs:process.env.ERREURS,latence:process.env.LATENCE});
          fs.writeFileSync(p,JSON.stringify(h.slice(0,10),null,2));
          "
          cat > public/admin/agents/index.html <<HTML
          <!DOCTYPE html>
          <html lang="fr"><head>
          <meta charset="utf-8"><meta name="viewport" content="width=device-width,initial-scale=1">
          <title>Sentinel Quantum Supervisor</title>
          <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
          <style>
          body{background:#000;color:#0ff;font-family:monospace;padding:20px;}
          h1{color:#0ff;text-shadow:0 0 10px #0ff;}
          .log{background:#0a0a0a;border:1px solid #033;padding:15px;border-radius:8px;}
          table{width:100%;border-collapse:collapse;margin-top:15px;}
          td,th{border:1px solid #033;padding:6px;text-align:left;}
          th{background:#022;color:#0ff;}
          tr:nth-child(even){background:#010;}
          canvas{background:#001;border-radius:8px;padding:10px;margin-top:10px;}
          footer{margin-top:20px;font-size:12px;color:#0cc;}
          </style>
          </head><body>
          <h1>üõ∞Ô∏è Sentinel Quantum Supervisor ‚Äî v8.0</h1>
          <div class="log"><pre>$(cat health_report.txt)</pre></div>
          <h2>üìä Historique IA</h2>
          <canvas id="trend" height="240"></canvas>
          <table id="t"><thead><tr><th>Date</th><th>Erreurs</th><th>Latence (ms)</th></tr></thead><tbody></tbody></table>
          <script>
          fetch('history.json').then(r=>r.json()).then(d=>{
            const tb=document.querySelector('#t tbody');
            const dates=d.map(x=>x.date);
            const err=d.map(x=>parseInt(x.erreurs));
            const lat=d.map(x=>parseInt(x.latence));
            d.forEach(x=>{
              const tr=document.createElement('tr');
              tr.innerHTML=\`<td>\${x.date}</td><td>\${x.erreurs}</td><td>\${x.latence}</td>\`;
              tb.appendChild(tr);
            });
            new Chart(document.getElementById('trend'),{
              type:'line',
              data:{labels:dates,
                datasets:[
                  {label:'Erreurs',data:err,borderColor:'#ff4444',backgroundColor:'#ff444422',fill:true},
                  {label:'Latence',data:lat,borderColor:'#00ffff',backgroundColor:'#00ffff22',fill:true}
                ]},
              options:{scales:{y:{beginAtZero:true}},plugins:{legend:{labels:{color:'#0ff'}}}}
            });
          });
          </script>
          <footer>Derni√®re mise √† jour : \$DATE<br>AutoFixer v8.0 ‚Ä¢ Historique + Tendances IA</footer>
          </body></html>
          HTML

      - name: üì≤ Notification Telegram
        if: always()
        run: |
          STATUS="‚úÖ D√©ploiement r√©ussi"
          if [ "\${{ job.status }}" != "success" ]; then STATUS="‚ö†Ô∏è Erreur d√©tect√©e"; fi
          MSG="ü§ñ *Sentinel AutoFixer v8.0*\n\n\${STATUS}\n\nü©∫ *Rapport HealthAgent :*\n$(cat health_report.txt)\n\nüìà Historique mis √† jour\nüåç [Console IA](https://sentinelquantumvanguardaipro.pages.dev/admin/agents/)"
          curl -s -X POST "https://api.telegram.org/bot\${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -d chat_id="\${{ secrets.TELEGRAM_CHAT_ID }}" \
            -d parse_mode="Markdown" \
            -d text="\$MSG"
