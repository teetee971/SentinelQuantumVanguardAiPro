name: üß† Sentinel AutoFixer v10.0 ‚Äî QuantumPredictor + AutoRemediator

on:
  schedule:
    - cron: "*/30 * * * *"
  workflow_dispatch:

jobs:
  sentinel-autofix:
    runs-on: ubuntu-latest

    steps:
      - name: üîÑ Checkout d√©p√¥t
        uses: actions/checkout@v4

      - name: ‚öôÔ∏è Pr√©pare la structure
        run: |
          mkdir -p public/{dashboard,documentation,admin/agents}
          touch public/dashboard/.keep public/documentation/.keep

      - name: ü©∫ HealthAgent (analyse latence/erreurs)
        id: health
        run: |
          URLS=(
            "https://sentinelquantumvanguardaipro.pages.dev"
            "https://sentinelquantumvanguardaipro.pages.dev/dashboard/"
            "https://sentinelquantumvanguardaipro.pages.dev/documentation/"
          )
          ERR=0; LAT=0; N=0
          for URL in "${URLS[@]}"; do
            T0=$(date +%s%3N)
            C=$(curl -o /dev/null -s -w "%{http_code}" "$URL")
            T1=$(date +%s%3N); D=$((T1-T0))
            LAT=$((LAT+D)); N=$((N+1))
            [ "$C" != "200" ] && ERR=$((ERR+1))
          done
          AVG=$((LAT/N))
          echo "ERREURS=$ERR" >> $GITHUB_ENV
          echo "LATENCE=$AVG" >> $GITHUB_ENV
          echo -e "‚úÖ Health check termin√©\nErreurs=$ERR\nLatence=${AVG}ms"

      - name: üîÆ QuantumPredictor (z-score & anomalies)
        run: |
          mkdir -p public/admin/agents
          HIST=public/admin/agents/history.json
          [ -f "$HIST" ] || echo "[]" > "$HIST"

          node - <<'NODE'
          const fs=require('fs');
          const path='public/admin/agents/history.json';
          const h=JSON.parse(fs.readFileSync(path,'utf8'));
          const now=new Date().toISOString().replace('T',' ').replace(/\..+/,'')+' UTC';
          const e=parseInt(process.env.ERREURS||'0',10);
          const l=parseInt(process.env.LATENCE||'0',10);
          h.unshift({date:now, erreurs:e, latence:l});
          const H=h.slice(0,20);

          const mean=a=>a.reduce((x,y)=>x+y,0)/a.length||0;
          const std=a=>{if(a.length<2)return 0;const m=mean(a);return Math.sqrt(a.reduce((s,x)=>s+(x-m)**2,0)/(a.length-1));};
          const errs=H.map(x=>x.erreurs), lats=H.map(x=>x.latence);
          const me=mean(errs), se=std(errs), ml=mean(lats), sl=std(lats);
          const z=(x,m,s)=>s>0?(x-m)/s:0;
          const za=z(e,me,se), zl=z(l,ml,sl);

          const anomalyErr=e>=3||za>=2.5;
          const anomalyLat=l>=1500||zl>=2.5;
          const anomaly=anomalyErr||anomalyLat;

          fs.writeFileSync(path,JSON.stringify(H,null,2));
          fs.writeFileSync('public/admin/agents/anomaly.json',JSON.stringify({
            date:now,erreurs:e,latence:l,zErr:+za.toFixed(2),zLat:+zl.toFixed(2),
            anomaly,anomalyErr,anomalyLat
          },null,2));
          NODE

      - name: üß† AutoRemediator (auto-purge, rollback, warm-up)
        if: always()
        run: |
          mkdir -p public/admin/agents
          FILE=public/admin/agents/anomaly.json
          [ ! -f "$FILE" ] && echo '{"anomaly":false}' > "$FILE"
          STATUS=$(jq -r '.anomaly' "$FILE")

          echo "üîé Analyse anomalie : $STATUS"

          # Historique court des anomalies (2 cycles)
          SHORT=public/admin/agents/autoheal.json
          [ -f "$SHORT" ] || echo "[]" > "$SHORT"
          node - <<'NODE'
          const fs=require('fs');
          const path='public/admin/agents/autoheal.json';
          const a=JSON.parse(fs.readFileSync(path,'utf8'));
          const j=JSON.parse(fs.readFileSync('public/admin/agents/anomaly.json','utf8'));
          a.unshift({t:Date.now(), anomaly:j.anomaly});
          fs.writeFileSync(path,JSON.stringify(a.slice(0,5),null,2));
          NODE

          # Si 2 cycles cons√©cutifs d‚Äôanomalies ‚Üí action
          COUNT=$(jq '[.[] | select(.anomaly==true)] | length' public/admin/agents/autoheal.json)
          if [ "$COUNT" -ge 2 ]; then
            echo "üö® Deux anomalies cons√©cutives ‚Äî d√©clenchement AutoRemediator"
            ACTS=""

            # Purge Cloudflare
            if [ -n "${{ secrets.CLOUDFLARE_ZONE_ID }}" ]; then
              curl -s -X POST "https://api.cloudflare.com/client/v4/zones/${{ secrets.CLOUDFLARE_ZONE_ID }}/purge_cache" \
                -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
                -H "Content-Type: application/json" \
                --data '{"purge_everything":true}' > /dev/null
              ACTS+="üßπ Purge Cloudflare OK\n"
            fi

            # Rollback Git (HEAD~1)
            git reset --hard HEAD~1 && git push --force || true
            ACTS+="‚è™ Rollback Git effectu√©\n"

            # Warm-up ping
            curl -s -o /dev/null https://sentinelquantumvanguardaipro.pages.dev &
            ACTS+="üî• Warm-up cache initialis√©\n"

            echo -e "$ACTS" > remediation.log
          else
            echo "‚úÖ Aucune rem√©diation requise"
          fi

      - name: üì≤ Notification Telegram
        if: always()
        run: |
          A=$(cat public/admin/agents/anomaly.json 2>/dev/null || echo '{}')
          IS=$(echo "$A" | jq -r '.anomaly')
          ERR=$(echo "$A" | jq -r '.erreurs')
          LAT=$(echo "$A" | jq -r '.latence')
          MSG="ü§ñ *Sentinel AutoFixer v10.0 ‚Äî AutoRemediator*\n\n"
          if [ "$IS" = "true" ]; then
            MSG+="üö® *Anomalie confirm√©e*\nErreurs: \`$ERR\`, Latence: \`$LAT ms\`\n\n"
            if [ -f remediation.log ]; then
              MSG+="ü©∫ *Rem√©diations effectu√©es:*\n$(cat remediation.log)"
            else
              MSG+="‚ö†Ô∏è Aucune action encore requise (cycle 1/2)"
            fi
          else
            MSG+="üü¢ *Syst√®me stable*\nAucune anomalie d√©tect√©e."
          fi
          MSG+="\n\nüìà [Console](https://sentinelquantumvanguardaipro.pages.dev/admin/agents/)"
          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -d chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" \
            -d parse_mode="Markdown" \
            -d text="$MSG"
