name: ⚙️ AI Performance Optimizer

on:
  schedule:
    - cron: "*/30 * * * *"   # toutes les 30 minutes
  workflow_dispatch:

jobs:
  optimize:
    runs-on: ubuntu-latest
    steps:
      - name: ⚙️ Checkout Repository
        uses: actions/checkout@v4

      - name: 📡 Analyse de performance Cloudflare
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ZONE_ID: ${{ secrets.CLOUDFLARE_ZONE_ID }}
        run: |
          echo "🌐 Vérification Cloudflare CDN..."
          START=$(date +%s)
          curl -s -o /dev/null -w "%{time_total}" https://sentinelquantumvanguardaipro.pages.dev > latency.txt
          LATENCY=$(cat latency.txt)
          echo "⚙️ Latence actuelle : ${LATENCY}s"
          if (( $(echo "$LATENCY > 2.0" | bc -l) )); then
            echo "⚠️ Latence trop élevée → purge cache Cloudflare"
            curl -s -X POST "https://api.cloudflare.com/client/v4/zones/$CLOUDFLARE_ZONE_ID/purge_cache" \
              -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
              -H "Content-Type: application/json" \
              --data '{"purge_everything":true}'
          fi
          END=$(date +%s)
          echo "⏱ Temps total d’exécution : $((END-START))s"

      - name: 🔬 Vérification de l’usage CPU et mémoire
        run: |
          echo "🧠 Mesure locale..."
          CPU=$(top -bn1 | grep "Cpu(s)" | awk '{print $2 + $4}')
          MEM=$(free -m | awk '/Mem:/ {print $3 "/" $2 " MB (" $3/$2*100 "%)"}')
          echo "🧩 CPU: ${CPU}%  |  RAM: ${MEM}"

      - name: 🧮 Ajustement automatique des fréquences
        run: |
          echo "📊 Lecture du rapport précédent..."
          LATENCY=$(cat latency.txt)
          echo "📈 Adaptation dynamique..."
          if (( $(echo "$LATENCY > 3.0" | bc -l) )); then
            echo "⚠️ Réduction des déclenchements à toutes les 45 min"
            sed -i 's|*/30|*/45|' .github/workflows/ai-performance-optimizer.yml || true
          else
            echo "✅ Latence stable — maintien à 30 min"
          fi

      - name: 💾 Génération d’un rapport de performance
        run: |
          mkdir -p logs
          echo "🕒 $(date -u)" > logs/perf-report.txt
          echo "⚙️ Latence: ${LATENCY}s" >> logs/perf-report.txt
          echo "🧠 CPU: ${CPU}%" >> logs/perf-report.txt
          echo "💾 Mémoire: ${MEM}" >> logs/perf-report.txt

      - name: 📤 Commit automatique du rapport
        run: |
          git config --global user.name "SentinelAI-Autobot"
          git config --global user.email "autobot@sentinel.ai"
          git add logs/perf-report.txt || true
          git commit -m "📊 Update AI performance report ($(date -u '+%H:%M'))" || echo "Pas de changement"
          git push || true

      - name: 📲 Notification Telegram
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          MSG="⚙️ *AI Performance Optimizer*\n🕒 $(date -u '+%Y-%m-%d %H:%M:%S') UTC\n⚙️ Latence: ${LATENCY}s\n🧠 CPU: ${CPU}%\n💾 Mémoire: ${MEM}\n🌍 [Sentinel Vanguard AI Pro](https://sentinelquantumvanguardaipro.pages.dev)"
          curl -s -X POST "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage" \
            -d "chat_id=$TELEGRAM_CHAT_ID" \
            -d "text=$MSG" \
            -d "parse_mode=Markdown"
