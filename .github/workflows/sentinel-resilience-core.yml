name: 🧠 Sentinel Resilience Core

on:
  schedule:
    - cron: '*/30 * * * *' # toutes les 30 minutes
  workflow_dispatch:

jobs:
  resilience_core:
    runs-on: ubuntu-latest

    steps:
      - name: 🔄 Checkout du dépôt
        uses: actions/checkout@v4

      - name: 🧩 Analyse des temps de build récents
        uses: actions/github-script@v7
        id: analyze
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const { data: runs } = await github.rest.actions.listWorkflowRunsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 15
            });
            const data = runs.workflow_runs.map(r => ({
              name: r.name,
              duration: ((new Date(r.updated_at) - new Date(r.run_started_at)) / 60000).toFixed(2),
              status: r.conclusion,
              started: r.run_started_at
            }));

            const avg = data.reduce((a,b) => a + parseFloat(b.duration), 0) / data.length;
            const failures = data.filter(r => r.status === "failure").length;
            const load = (failures / data.length * 100).toFixed(1);

            fs.mkdirSync('resilience', { recursive: true });
            const report = { average_duration_min: avg, failure_rate_percent: load, samples: data.length, timestamp: new Date().toISOString() };
            fs.writeFileSync('resilience/analysis.json', JSON.stringify(report, null, 2));
            core.setOutput("load", load);
            core.notice(`📊 Durée moyenne: ${avg} min | Taux d'échec: ${load}%`);

      - name: ⚙️ Ajustement automatique des workflows
        if: ${{ fromJSON(steps.analyze.outputs.load) > 30 }}
        run: |
          echo "⚠️ Charge élevée détectée : taux d’échec > 30%."
          echo "⏸️ Suspension temporaire de certains workflows intensifs..."
          echo "reschedule=1" > resilience/state.txt

      - name: 🧠 Aucune surcharge détectée
        if: ${{ fromJSON(steps.analyze.outputs.load) <= 30 }}
        run: |
          echo "✅ Système stable : aucune action nécessaire."
          echo "reschedule=0" > resilience/state.txt

      - name: 🌐 Génération du rapport HTML
        run: |
          mkdir -p public/resilience
          echo "<html><head><title>Sentinel Resilience Core</title><meta http-equiv='refresh' content='1800'></head><body style='background:#0d1117;color:#e6edf3;font-family:monospace;padding:20px;'>" > public/resilience/index.html
          echo "<h2>🧠 Sentinel Resilience Core</h2><hr>" >> public/resilience/index.html
          echo "<h3>📊 Analyse</h3><pre>" >> public/resilience/index.html
          cat resilience/analysis.json >> public/resilience/index.html
          echo "</pre><h3>⚙️ Statut</h3><pre>" >> public/resilience/index.html
          cat resilience/state.txt >> public/resilience/index.html
          echo "</pre><hr><p>🕒 Dernière vérification : $(date)</p></body></html>" >> public/resilience/index.html
          echo "✅ Rapport HTML généré."

      - name: 🚀 Publication sur Cloudflare Pages
        uses: cloudflare/pages-action@v1
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          projectName: sentinelquantumvanguardaipro
          directory: public
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}

      - name: 📡 Notification Telegram
        run: |
          LOAD=$(jq -r '.failure_rate_percent' resilience/analysis.json)
          AVG=$(jq -r '.average_duration_min' resilience/analysis.json)
          MSG="🧠 Sentinel Resilience Core\nDurée moyenne: ${AVG} min\nTaux d'échec: ${LOAD}%\n🕒 $(date)"
          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
            -d text="$MSG"

      - name: ✅ Fin du cycle Resilience Core
        run: echo "✔️ Sentinel Resilience Core terminé avec succès."