- name: 🌐 Génération de la carte Sentinel World Map
        run: |
          mkdir -p dashboard
          cat > dashboard/map.html <<'HTML'
          <!DOCTYPE html>
          <html lang="fr">
          <meta charset="utf-8">
          <meta name="viewport" content="width=device-width,initial-scale=1">
          <title>🌐 Sentinel World Map — Quantum Vanguard AI</title>
          <style>
            body {
              background:#000;
              margin:0;
              overflow:hidden;
              font-family: system-ui, sans-serif;
              color:#fff;
            }
            #globe { width:100vw; height:100vh; position:absolute; top:0; left:0; }
            .panel {
              position: fixed;
              bottom: 120px;
              right: 20px;
              background: rgba(0,0,0,0.6);
              padding: 12px 18px;
              border-radius: 10px;
              font-size: 14px;
              line-height: 1.6;
              backdrop-filter: blur(6px);
              border: 1px solid rgba(255,255,255,0.15);
            }
            .panel h3 {
              margin: 0 0 6px;
              font-size: 15px;
              color: #61dafb;
            }
            .ok { color:#00ff9d; }
            .warn { color:#ffb347; }
            .err { color:#ff6b6b; }
            /* Live Agent Monitor */
            .monitor {
              position: fixed;
              bottom: 0;
              left: 0;
              width: 100%;
              background: rgba(0,0,0,0.7);
              padding: 10px;
              border-top: 1px solid rgba(255,255,255,0.15);
              font-size: 13px;
              color: #cce7ff;
              overflow-x: auto;
              white-space: nowrap;
            }
            .agent {
              display: inline-block;
              background: #0f1620;
              margin-right: 8px;
              padding: 6px 10px;
              border-radius: 6px;
              border: 1px solid #123;
              min-width: 140px;
            }
            .agent span {
              display: block;
              font-size: 11px;
              color: #7fa3b5;
            }
          </style>
          <body>
            <div id="globe"></div>
            <div class="panel">
              <h3>🧠 Sentinel IA Nodes</h3>
              <div>🇪🇺 <b>EU Node</b>: <span id="eu" class="ok">Online</span></div>
              <div>🇺🇸 <b>US Node</b>: <span id="us" class="ok">Online</span></div>
              <div>🇦🇺 <b>APAC Node</b>: <span id="apac" class="warn">Degraded</span></div>
              <div>🇬🇵 <b>Caribbean Node</b>: <span id="carib" class="ok">Stable</span></div>
            </div>

            <div class="monitor" id="monitor">
              <b>🛰️ Live Agent Monitor</b><br>
              <div id="agents"></div>
            </div>

            <script src="https://cdn.jsdelivr.net/npm/three@0.160.0/build/three.min.js"></script>
            <script src="https://cdn.jsdelivr.net/npm/globe.gl@2.34.1/dist/globe.gl.min.js"></script>
            <script>
              // --- Globe setup ---
              const globe = Globe()(document.getElementById('globe'))
                .globeImageUrl('https://unpkg.com/three-globe/example/img/earth-night.jpg')
                .backgroundImageUrl('https://unpkg.com/three-globe/example/img/night-sky.png')
                .pointAltitude('size')
                .pointColor('color')
                .pointLabel('name')
                .pointsData([
                  { lat:48.8566, lng:2.3522, size:0.6, color:'lime', name:'🇪🇺 EU Node — Online' },
                  { lat:37.7749, lng:-122.4194, size:0.6, color:'cyan', name:'🇺🇸 US Node — Online' },
                  { lat:-33.8688, lng:151.2093, size:0.6, color:'orange', name:'🇦🇺 APAC Node — Degraded' },
                  { lat:16.265, lng:-61.551, size:0.6, color:'gold', name:'🇬🇵 Caribbean Node — Stable' },
                ])
                .pointsTransitionDuration(1000);

              globe.controls().autoRotate = true;
              globe.controls().autoRotateSpeed = 0.6;

              // --- Simulation des statuts IA ---
              setInterval(() => {
                const nodes = [
                  {id:'eu', states:['Online','Stable','Degraded']},
                  {id:'us', states:['Online','Degraded','Offline']},
                  {id:'apac', states:['Degraded','Stable','Online']},
                  {id:'carib', states:['Stable','Online','Degraded']}
                ];
                for (const n of nodes) {
                  const state = n.states[Math.floor(Math.random()*n.states.length)];
                  const el = document.getElementById(n.id);
                  el.textContent = state;
                  el.className = state === 'Online' ? 'ok' : state === 'Stable' ? 'ok' : state === 'Degraded' ? 'warn' : 'err';
                }
              }, 15000);

              // --- Live Agent Monitor ---
              const agentList = [
                { name: "FinalStateCommitter", zone: "EU", ping: 41 },
                { name: "QuantumFailoverAI", zone: "US", ping: 63 },
                { name: "FirebaseDeployExecutor", zone: "CAR", ping: 78 },
                { name: "PerformanceAutoTuner", zone: "APAC", ping: 132 },
                { name: "LiveDeploySentinel", zone: "EU", ping: 55 },
                { name: "HeuristicPredictorAI", zone: "US", ping: 47 },
                { name: "CDNConsistencyAgent", zone: "APAC", ping: 100 },
                { name: "AIReplayFixer", zone: "CAR", ping: 70 }
              ];

              function renderAgents() {
                const container = document.getElementById('agents');
                container.innerHTML = '';
                agentList.forEach(agent => {
                  const cpu = Math.floor(Math.random()*60)+20;
                  const ok = cpu < 80 ? 'ok' : 'warn';
                  container.innerHTML += `
                    <div class="agent ${ok}">
                      ${agent.name}<span>${agent.zone} • ${agent.ping}ms • CPU ${cpu}%</span>
                    </div>`;
                });
              }

              renderAgents();
              setInterval(renderAgents, 10000); // refresh live status every 10s
            </script>
          </body>
          </html>
          HTML