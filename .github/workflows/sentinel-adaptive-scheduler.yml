name: 🕓 Sentinel Adaptive Scheduler

on:
  schedule:
    - cron: '10 * * * *' # vérifie toutes les heures à :10
  workflow_dispatch:

jobs:
  adaptive_scheduler:
    runs-on: ubuntu-latest

    steps:
      - name: 🔄 Checkout repository
        uses: actions/checkout@v4

      - name: 🧠 Analyser la charge et les cycles récents
        uses: actions/github-script@v7
        id: analyze
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const { data: runs } = await github.rest.actions.listWorkflowRunsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 10
            });
            const avgDuration = runs.workflow_runs.reduce((a,b)=>a+(new Date(b.updated_at)-new Date(b.run_started_at)),0)/runs.workflow_runs.length/60000;
            const failures = runs.workflow_runs.filter(r=>r.conclusion==="failure").length;
            const loadScore = ((avgDuration/10)+(failures*5)).toFixed(2);
            fs.mkdirSync('scheduler', {recursive:true});
            fs.writeFileSync('scheduler/status.json', JSON.stringify({avgDuration, failures, loadScore, timestamp:new Date().toISOString()}, null, 2));
            core.setOutput('loadScore', loadScore);
            core.notice(`📊 Durée moyenne: ${avgDuration.toFixed(1)} min | Score de charge: ${loadScore}`);

      - name: ⚙️ Ajustement dynamique de planification
        run: |
          mkdir -p scheduler
          LOAD=$(jq -r '.loadScore' scheduler/status.json)
          echo "🕓 Analyse de la charge: ${LOAD}"
          if (( $(echo "$LOAD > 25" | bc -l) )); then
            echo "⚠️ Charge élevée détectée. Espacement des workflows à 2h." > scheduler/decision.txt
            NEXT_CRON="0 */2 * * *"
          elif (( $(echo "$LOAD < 10" | bc -l) )); then
            echo "✅ Système stable. Réduction à 30 min d'intervalle." > scheduler/decision.txt
            NEXT_CRON="*/30 * * * *"
          else
            echo "ℹ️ Charge modérée. Maintien à 1h d'intervalle." > scheduler/decision.txt
            NEXT_CRON="0 * * * *"
          fi
          echo "NEXT_CRON=${NEXT_CRON}" >> $GITHUB_ENV

      - name: 🧩 Génération du rapport HTML
        run: |
          mkdir -p public/scheduler
          echo "<html><head><title>Sentinel Adaptive Scheduler</title><meta http-equiv='refresh' content='3600'></head><body style='background:#0d1117;color:#e6edf3;font-family:monospace;padding:20px;'>" > public/scheduler/index.html
          echo "<h2>🕓 Sentinel Adaptive Scheduler</h2><hr>" >> public/scheduler/index.html
          echo "<h3>📊 Charge actuelle</h3><pre>" >> public/scheduler/index.html
          cat scheduler/status.json >> public/scheduler/index.html
          echo "</pre><h3>⚙️ Décision IA</h3><pre>" >> public/scheduler/index.html
          cat scheduler/decision.txt >> public/scheduler/index.html
          echo "</pre><hr><p>🕒 Dernière exécution : $(date)</p></body></html>" >> public/scheduler/index.html

      - name: 🌐 Publication sur Cloudflare Pages
        uses: cloudflare/pages-action@v1
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          projectName: sentinelquantumvanguardaipro
          directory: public
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}

      - name: 📡 Notification Telegram
        run: |
          DECISION=$(cat scheduler/decision.txt)
          MSG="🕓 Sentinel Adaptive Scheduler\n${DECISION}\n🕒 $(date)"
          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
            -d text="$MSG"

      - name: ✅ Fin du cycle Scheduler
        run: echo "✔️ Sentinel Adaptive Scheduler terminé avec succès."