name: ♻️ Wave 10 – Render Health Auto-Restart + CPU Load Balancer AI

on:
  schedule:
    - cron: "*/15 * * * *"   # toutes les 15 minutes
  workflow_dispatch:

jobs:
  render_health:
    runs-on: ubuntu-latest
    name: 🧩 Render Health & Load Balance Monitor
    steps:
      - name: ⚙️ Initialisation
        run: |
          echo "🚀 Initialisation du module Wave 10"
          mkdir -p logs

      - name: 📊 Récupération des métriques Render
        id: metrics
        run: |
          echo "📡 Lecture des métriques backend..."
          API_URL="https://api.render.com/v1/services/<SERVICE_ID>/metrics"
          RESPONSE=$(curl -s -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" "$API_URL")
          echo "$RESPONSE" | jq . > logs/render_metrics.json

          CPU=$(echo "$RESPONSE" | jq '.cpu | tonumber' 2>/dev/null || echo 0)
          RAM=$(echo "$RESPONSE" | jq '.memory | tonumber' 2>/dev/null || echo 0)
          LAT=$(echo "$RESPONSE" | jq '.latency | tonumber' 2>/dev/null || echo 0)

          echo "CPU=$CPU%" >> $GITHUB_OUTPUT
          echo "RAM=$RAM%" >> $GITHUB_OUTPUT
          echo "LAT=$LAT" >> $GITHUB_OUTPUT

          echo "$(date '+%d/%m/%Y %H:%M:%S') | CPU: ${CPU}% | RAM: ${RAM}% | Latence : ${LAT}s" >> logs/auto-restart.log

      - name: 🔁 Redéploiement Render si surcharge
        if: ${{ steps.metrics.outputs.CPU > 85 || steps.metrics.outputs.RAM > 90 || steps.metrics.outputs.LAT > 5 }}
        run: |
          echo "⚠️ Charge trop élevée ! Déclenchement redéploiement Render..."
          curl -X POST "https://api.render.com/v1/services/<SERVICE_ID>/deploys" \
               -H "Accept: application/json" \
               -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
               -d '{"clearCache":false}'
          echo "✅ Backend redéployé automatiquement." >> logs/auto-restart.log

      - name: 🧠 Répartition de charge simulée
        run: |
          echo "🧮 Simulation d’équilibrage IA local..."
          echo "Instances : 2 | Algorithme : Round-Robin AI" >> logs/auto-restart.log

      - name: 📩 Notification Telegram (optionnelle)
        if: always()
        run: |
          if [ -n "${{ secrets.TELEGRAM_WEBHOOK }}" ]; then
            MSG="♻️ Render Health : CPU ${{ steps.metrics.outputs.CPU }} % | RAM ${{ steps.metrics.outputs.RAM }} % | Lat ${{ steps.metrics.outputs.LAT }} s"
            curl -s -X POST ${{ secrets.TELEGRAM_WEBHOOK }} -d "text=$MSG"
          fi

      - name: 🗂️ Upload des logs
        uses: actions/upload-artifact@v4
        with:
          name: render-health-logs
          path: logs/
