name: üß† Sentinel Quantum Vanguard AI Pro ‚Äì Auto-Heal + Auto-Rollback CI/CD

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  BOT_TOKEN: "7630324617:AAGYNTiOIhHFDyT83Qt_DezDUxEzEJf-K9E"
  CHAT_ID: "5707814118"

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: üîÑ Checkout du d√©p√¥t
        uses: actions/checkout@v4

      - name: üß© Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: üì¶ Installation des d√©pendances
        id: deps
        run: |
          echo "üì¶ Installation..." | tee deploy.log
          npm install --legacy-peer-deps --force --no-audit --no-fund 2>&1 | tee -a deploy.log
        continue-on-error: true

      - name: üèóÔ∏è Build du projet
        id: build
        run: |
          echo "üèóÔ∏è Build du projet..." | tee -a deploy.log
          npm run build 2>&1 | tee -a deploy.log
        continue-on-error: true

      - name: üåê D√©ploiement Cloudflare Pages
        id: deploy
        run: |
          npm install -g wrangler 2>&1 | tee -a deploy.log
          wrangler pages deploy dist --project-name=sentinelquantumvanguardaipro 2>&1 | tee -a deploy.log
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        continue-on-error: true

      - name: üßæ V√©rification du statut
        id: check
        run: |
          if [ "${{ steps.deps.outcome }}" == "failure" ]; then
            echo "status=deps_failed" >> $GITHUB_ENV
          elif [ "${{ steps.build.outcome }}" == "failure" ]; then
            echo "status=build_failed" >> $GITHUB_ENV
          elif [ "${{ steps.deploy.outcome }}" == "failure" ]; then
            echo "status=deploy_failed" >> $GITHUB_ENV
          else
            echo "status=success" >> $GITHUB_ENV
          fi

      - name: üì° Notification Telegram
        if: always()
        run: |
          MSG="üõ∞Ô∏è *Sentinel Quantum Vanguard AI Pro ‚Äì Rapport CI/CD*%0A"
          MSG+="‚è∞ $(date '+%Y-%m-%d %H:%M:%S')%0A"

          case "${{ env.status }}" in
            deps_failed)   MSG+="‚ùå *√âchec npm install*" ;;
            build_failed)  MSG+="‚ùå *√âchec du build*" ;;
            deploy_failed) MSG+="‚ö†Ô∏è *Erreur Cloudflare Pages*" ;;
            success)       MSG+="‚úÖ *D√©ploiement r√©ussi* üöÄ" ;;
            *)             MSG+="‚öôÔ∏è *Statut inconnu*" ;;
          esac

          curl -s -X POST "https://api.telegram.org/bot${BOT_TOKEN}/sendMessage" \
               -d chat_id="${CHAT_ID}" -d parse_mode="Markdown" \
               --data-urlencode "text=$MSG"

          curl -s -F chat_id="${CHAT_ID}" -F document=@deploy.log \
               "https://api.telegram.org/bot${BOT_TOKEN}/sendDocument"

      - name: üîÅ Auto-Heal (relance une fois)
        if: env.status != 'success'
        run: |
          echo "‚ôªÔ∏è Tentative de red√©ploiement automatique..." | tee -a deploy.log
          gh workflow run "sentinel-autoheal-rollback.yml" --ref main --raw-field attempt="retry1"
          MSG="‚ôªÔ∏è *Auto-Heal activ√©* : relance automatique du d√©ploiement."
          curl -s -X POST "https://api.telegram.org/bot${BOT_TOKEN}/sendMessage" \
               -d chat_id="${CHAT_ID}" -d parse_mode="Markdown" \
               --data-urlencode "text=$MSG"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: üïπÔ∏è Auto-Rollback (si 2·µâ tentative √©choue)
        if: github.event.inputs.attempt == 'retry1' && env.status != 'success'
        run: |
          echo "‚ö†Ô∏è 2·µâ tentative √©chou√©e ‚Äì restauration du dernier commit stable..." | tee -a deploy.log
          git fetch origin main
          git reset --hard HEAD~1
          git push --force origin main
          MSG="üîÅ *Auto-Rollback ex√©cut√©* : restauration du commit pr√©c√©dent stable."
          curl -s -X POST "https://api.telegram.org/bot${BOT_TOKEN}/sendMessage" \
               -d chat_id="${CHAT_ID}" -d parse_mode="Markdown" \
               --data-urlencode "text=$MSG"
