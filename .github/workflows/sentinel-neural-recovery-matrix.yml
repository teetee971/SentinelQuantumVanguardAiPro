name: 🧬 Sentinel Neural Recovery Matrix

on:
  workflow_run:
    workflows:
      - "🌌 Sentinel Nightly Health Monitor"
      - "🧩 Sentinel Auto-Healer"
      - "🧠 Sentinel Cognitive Dashboard"
      - "🧠 Sentinel Resilience Core"
      - "🔮 Sentinel Predictive Maintainer"
      - "🕓 Sentinel Adaptive Scheduler"
    types:
      - completed
  workflow_dispatch:

jobs:
  neural_recovery:
    runs-on: ubuntu-latest

    steps:
      - name: 🔄 Checkout du dépôt
        uses: actions/checkout@v4

      - name: 🧠 Détection d’anomalies ou d’échecs
        uses: actions/github-script@v7
        id: detect
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const { data: runs } = await github.rest.actions.listWorkflowRunsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 10
            });
            const failed = runs.workflow_runs.filter(r => r.conclusion === "failure");
            fs.mkdirSync('recovery', { recursive: true });
            fs.writeFileSync('recovery/failed.json', JSON.stringify(failed, null, 2));
            core.setOutput("count", failed.length);
            core.notice(`🧩 ${failed.length} workflows échoués détectés.`);

      - name: 🚑 Relance automatique des workflows critiques
        if: ${{ fromJSON(steps.detect.outputs.count) > 0 }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: runs } = await github.rest.actions.listWorkflowRunsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 5
            });
            for (const r of runs.workflow_runs.filter(x => x.conclusion === "failure")) {
              await github.rest.actions.reRunWorkflow({
                owner: context.repo.owner,
                repo: context.repo.repo,
                run_id: r.id
              });
              console.log(`♻️ Relancé automatiquement : ${r.name}`);
            }

      - name: 🧩 Reconstruction des journaux corrompus
        run: |
          mkdir -p recovery/logs
          echo "🧠 Reconstruction des journaux..." > recovery/logs/repair.txt
          for f in telemetry/report.txt logs/github-runs.json status/github.json; do
            [ -f "$f" ] && cp "$f" recovery/logs/
          done
          echo "✅ Journaux restaurés le $(date)" >> recovery/logs/repair.txt

      - name: 🌐 Génération du rapport Neural Recovery
        run: |
          mkdir -p public/recovery
          echo "<html><head><title>Sentinel Neural Recovery Matrix</title><meta http-equiv='refresh' content='3600'></head><body style='background:#0d1117;color:#e6edf3;font-family:monospace;padding:20px;'>" > public/recovery/index.html
          echo "<h2>🧬 Sentinel Neural Recovery Matrix</h2><hr>" >> public/recovery/index.html
          echo "<h3>🩺 Workflows échoués</h3><pre>" >> public/recovery/index.html
          cat recovery/failed.json >> public/recovery/index.html
          echo "</pre><h3>🧠 Journaux restaurés</h3><pre>" >> public/recovery/index.html
          cat recovery/logs/repair.txt >> public/recovery/index.html
          echo "</pre><hr><p>🕒 Dernière exécution : $(date)</p></body></html>" >> public/recovery/index.html
          echo "✅ Rapport Neural Recovery généré."

      - name: 🚀 Publication sur Cloudflare Pages
        uses: cloudflare/pages-action@v1
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          projectName: sentinelquantumvanguardaipro
          directory: public
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}

      - name: 📡 Notification Telegram
        run: |
          COUNT=$(jq length recovery/failed.json)
          MSG="🧬 Sentinel Neural Recovery Matrix\nWorkflows échoués: ${COUNT}\nRapport: https://sentinelquantumvanguardaipro.pages.dev/recovery/\n🕒 $(date)"
          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
            -d text="$MSG"

      - name: ✅ Fin du cycle Neural Recovery
        run: echo "✔️ Sentinel Neural Recovery Matrix terminé avec succès."